扩展Spring MVC的配置
        使用WebMvcConfigurer这个bean
        WebMvcConfigurerAdapter(过时)
        可以添加拦截器 与视图映射等
使用@EnableWebMvc注解时说明不需要Spring Boot提供的Spring MVC配置一切配置由自己完成

Spring Boot 注测Servlet三大组件
                只需要注入
                        ServletRegistrationBean
                        FilterRegistrationBean
                        ServletListenerRegistrationBean
                        ...即可
@ConfigurationProperties与@Value的区别
        @ConfigurationProperties可以将前缀一样的配置封装到一个对象中去 不支持Sprint El 表达式
        支持松散绑定 如last_name 可以绑定到lastName上 可以进行JSR330校验 可以封装复杂类型
        @Value只能一个一个将值注入 支持Spring EL表达式
        如果需要将一系列配置注入到一个Bean中使用@ConfigurationProperties
视图
    使用 thymeleaf
        添加
          <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-thymeleaf</artifactId>
          </dependency>
         配置
         spring.thumeleaf.cache 一般配置成false  默认是true 关闭缓存

    使用jsp
        默认不支持JSP
            首先要添加<dependency>
                     <groupId>javax.servlet</groupId>
                     <artifactId>jstl</artifactId>
                 </dependency>
                要有一个SpringBootServletInitializer类的配置类
        添加配置
        默认位置在src/main/webapp
            spring.mvc.view.prefix:/WEB-INF/jsp/
            spring.mvc.view.suffix:.jsp
定制错误页面

    如果有模版引擎的话 默认在静态资源文件夹下寻找
       创建一个error文件夹  创建  错误状态吗.html 如：500.html 这时发生500错误 回来到该页面

        或 4xx.html 5xx.html
配置服务器端口等信息
    在配置文件中用server.**来配置


JPA
        添加依赖
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-data-jpa</artifactId>
               </dependency>
        将实体类上添加@Entity注解
        创建对应的接口继承JpaRepository<T, ID>接口即可

Mybatis
              添加依赖
                        <dependency>
                                   <groupId>org.mybatis.spring.boot</groupId>
                                   <artifactId>mybatis-spring-boot-starter</artifactId>
                                   <version>1.3.2</version>
                        </dependency>
              配置
              mapper.xml包
              mybatis.mapper-locations
              别名包
              mybatis.type-aliases-package
              配置文件的位子（也可以全在spring中配置）
              mybatis.config-location=classpath:mybatis-config.xml


activemq
        添加依赖
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-activemq</artifactId>
                </dependency>
                <dependency>（可选当spring.activemq.pool.enabled=true时需要添加此依赖）
                    <groupId>org.apache.activemq</groupId>
                    <artifactId>activemq-pool</artifactId>
                    <!-- <version>5.7.0</version> -->
                </dependency>
         配置
         spring.activemq.broker-url=tcp://localhost:61616
         spring.activemq.user=admin
         spring.activemq.password=admin
         spring.activemq.pool.enabled=false

       消息提供者
       public void send(Destination destination, String  message) throws JMSException {
               MessageCreator messageCreator=new MessageCreator() {
                   @Override
                   public Message createMessage(Session session) throws JMSException {
                       return session.createTextMessage(message);
                   }
               };
               jmsTemplate.send(destination, messageCreator);
           }
        消费者
        监听destination要和提供的destination一致
        @JmsListener(destination = "mq")
            public void receiveQueue(String text){
        //        if("消息2".equals(text)){
        //            throw new RuntimeException();
        //        }
                System.out.println(text);

            }
redis
   添加依赖
            <dependency>
               <groupId>org.springframework.boot</groupId>
               <artifactId>spring-boot-starter-data-redis</artifactId>
           </dependency>
         修改配置
         （默认连接本地 6379）
         直接注入RedisTemplate 即可


Shiro
        创建自己的Realm类继承AuthorizingRealm类
        在配置中注入org.apache.shiro.web.mgt.DefaultWebSecurityManager 依赖注入realm
springboot


    重要的几个监听器
    配置在META-INF/spring.factorles中
    ApplicationContextInitializer
    SpringApplicationRunListener

    只需要放在IOC容器中的两个监听器
    ApplicationRunner
    CommandLineRunner

SpringBoot 注解说明
    @Configuration  声明时一个配置类
    @ConditionalOnxxx 在指定环境下生效 底层时使用@Conditional注解实现的

    @EnableConfigurationProperties 将使用@ConfigurationProperties的类生效
    @PropertySource 加载制定配置文件
    @ImportResource 导入Spring配置文件

   自动配置原理
            已经在xxxAutoConfiguration写好了默认配置
            当需要修改配置是只需要在properties 修改对应的属性即可

webjars 静态资源映射
        /webjars/** 默认寻找路径 classpath:/META-INF/resources/webjars/
        静态资源存放路径
        classpath:/META-INF/resources/,
        classpath:/resources/,
        classpath:/static/,
        classpath:/public/

      可以通过 spring.resource.static.location 来指定静态静态资源的存放路径
yaml语法

    ""与''的区别 ''会将特殊字符转义 ""不会，按特殊字符表达的意思输出

    Map
    k: v
    行内 {k1: v1,k2: v2}

    数组的变现形式
    - 值
    行内表达为 【value1,value2,value3】
配置文件的加载位置 file:./config/
                file:/
                classpath:/config
                classpath:/
                优先级从高到低 如果有相同属性的配置 取优先级高的
  使用spring.config.location 可以指定配置文件的位置(命令行参数的形式) 同样会形成互补配置
配置文件中占位符
 ${random.xx}产生一个随机值
 ${配置的键} 值是这个键对应的值 如果没有配置键值 输出的是${配置的键}
 ${键:默认值} 如果键没有配置值 使用默认值


Profile
    不同环境下使用不同的配置如
  application-dev.properties
  application-test.properties
 默认使用application.properties
在配置文件中使用
spring.profiles.active=  来说明使用那个配置（只是'-'与'.'之间的值 如dev）
 ymal
 多配置
文档块
---
profile: 环境名称

自定义starter
    编写一个读取properties配置的类
    使用@ConfigurationProperties注解标示要获取的属性前缀
    然后创建一个配置类使@ConfigurationProperties的类生效 并进行需要的配置

    在resources/META-INF/spring.factories中
    添加上自己写的配置类
    org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
    mystarter.service.MyServiceConfig（配资类）\代表换行


SpringMVC
        HiddenHttpMethodFilter可以将POST请求转为PUT和DELETE请求
        必须是POST请求
        需要传来一个叫_method的参数 值是PUT时转为PUT请求 是DELETE时转为DELETE请求
        @RequestHeader可以获取请求头的信息

        @ModelAttribute   修饰的方法中，放入到Map时的键需要和目标方法参数类型的第一个字母小写的字符串一致时
        会默认获取map中的值，否者创建新对象

        自定义类型转换器
        创建一个实现Converter<S,T>接口的类 S 原类型（String）T 目标类型
        添加到ConversionServiceFactoryBean中 并将ConversionServiceFactoryBean注入到
        <mvc:annotation-driver conversion-service=""/>中

        <mvc:annotation-driver/> 会注入RequestMappingHandlerMapper
        RequestMappingHandleAdapter ExceptionHandlerExceptionResolver

        @InitBinder 标示的方法可以对WebDateBinder对象进行初始化
        方法不能有返回值
        HttpMessageConverter负责将请求消息转换为一个对象 或将一个对象输出为响应信息
            请求流程 请求转为HttpInputMessage 然后由HttpMessageConverter转为Spring MVC需要的对象
            响应流程 HttpMessageConverter将JAVA对象转为HttpOutputMessage 转为响应报文
        使用HttpMessageConverter
        HttpEntity
        ResponseEntity  作为返回值 可以实现文件下载

        异常处理
            使用@ExceptionHandler标注的方法可以对该Controller进行统一异常处理
            ,入参的Exception就是抛出的异常，入参不能是Map,如果需要把异常信息返回页面，请使用ModelAndView

           在@ControllerAdvice注解标注的类中使用@ExceptionHandler标注的方法  可以对所有Controller生效
            发生异常的时候会先在本类中找@ExceptionHandler注解标注的方法如果没有 去@ControllerAdvice注解标注的类中找
异步任务


Redis


   集群

  哨兵机制(至少需要3台)


ActiveMQ
    使用步骤
       创建连接工厂
       获取连接
       开启连接
       获取Session

       创建提供者，指定消息目的地，消息
       发送消息

       创建消费者，指定目的地，获取消息（最后签收消息）

    持久化方案
        JDBC
        kahaDB
